---
import { hashStringToColor } from '../utils/colorUtils';
// import { readItems } from '@directus/sdk';
// import directus from '../lib/directus';
export interface TagCloudProps {
  tagCounts?: Record<string, number>;
}
const { tagCounts: propTagCounts } = Astro.props as TagCloudProps;
let tagCounts: Record<string, number>;
if (propTagCounts) {
  tagCounts = propTagCounts;
} else {
  const tags = await directus.request(readItems('tags', {
    fields: ['id', 'name']
  }));
  const techguides = await directus.request(readItems('techguides', {
    fields: ['id', 'title', 'content', 'slug', 'tags', 'excerpt', 'image']
  }));
  const tagIdToNameMap = tags.reduce((acc, tag) => {
    acc[tag.id] = tag.name;
    return acc;
  }, {} as Record<string, string>);
  tagCounts = techguides.reduce((acc, techguide) => {
    if (techguide.tags) {
      techguide.tags.forEach(tag => {
        const tagName = typeof tag === 'object' ? tag.name : tagIdToNameMap[tag];
        if (tagName) {
          acc[tagName] = (acc[tagName] || 0) + 1;
        }
      });
    }
    return acc;
  }, {} as Record<string, number>);
}
const sortedTags = Object.entries(tagCounts).sort((a, b) => b[1] - a[1]) as [string, number][];
const maxCount = Math.max(...Object.values(tagCounts) as number[]);
const calculateFontSize = (count: number) => {
  return 0.75 + (count / maxCount) * 0.75;
};
---

<div class="flex flex-wrap gap-2 tag-block">
    {
      sortedTags.map(([tag, count]) => (
        <a
          href={`/blog?tag=${encodeURIComponent(tag)}`}
          class="inline-block rounded-md px-2 py-1 text-xs md:text-base lg:text-lg font-semibold text-white tag-style transition-all hover:scale-110 relative"
          data-tag={tag}
          style={`background-color: ${hashStringToColor(tag)};`}
        >
          {tag}
          <span class="ml-1 px-1 rounded bg-black bg-opacity-20">
            {count}
          </span>
        </a>
      ))
    }
  </div>
</section>
