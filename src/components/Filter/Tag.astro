---
interface Props {
  posts: any[];
}

const { posts } = Astro.props;

// Extract unique tags from posts
const tags = [...new Set(posts.flatMap(post => post.data.tags || []))];
---

<div class="flex flex-wrap gap-2 tag-block">
  <button
    class="tag-style rounded-md px-2 py-1 text-xs md:text-sm font-semibold text-white transition-all hover:scale-105"
    data-tag="all"
  >
    All
  </button>
  {tags.map((tag) => (
    <button
      class="tag-style rounded-md px-2 py-1 text-xs md:text-sm font-semibold text-white transition-all hover:scale-105"
      data-tag={tag}
    >
      {tag}
    </button>
  ))}
</div>

<script>
  function filterPosts() {
    const activeTag = document.querySelector('.tag-style.active')?.getAttribute('data-tag') || 'all';
    const posts = document.querySelectorAll('.post-card');
    
    posts.forEach(post => {
      if (activeTag === 'all') {
        post.classList.remove('hidden');
        return;
      }

      const postTags = JSON.parse(post.getAttribute('data-tags') || '[]');
      if (postTags.includes(activeTag)) {
        post.classList.remove('hidden');
      } else {
        post.classList.add('hidden');
      }
    });
  }

  document.addEventListener('astro:page-load', () => {
    const tagButtons = document.querySelectorAll('.tag-style');
    
    tagButtons.forEach(button => {
      button.addEventListener('click', () => {
        tagButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        filterPosts();
      });
    });

    // Apply tag colors
    if (typeof window.applyTagColorsToNewElements === 'function') {
      window.applyTagColorsToNewElements();
    }
  });
</script>

<style>
  .tag-style.active {
    transform: scale(1.1);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }
</style> 