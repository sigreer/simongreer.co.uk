---
import tagsData from '../../content/tags.json';

interface Props {
  posts: any[];
}

const { posts } = Astro.props;

const tags = [...new Set(posts
  .filter(post => !post.data.draft)
  .flatMap(post => post.data.tags?.map((tag: {id: string}) => tag.id) || []))];

const resolvedTags = tags.map((tag: string) => {
  const tagData = tagsData[tag as keyof typeof tagsData];
  return { id: tag, data: tagData };
});
---
<div class="flex flex-col gap-2">
<div class="flex items-center gap-2">
  <span class="font-semibold">FILTER:</span>
  <span id="active-tag" class="hidden cursor-pointer hover:opacity-75 !bg-transparent !text-black dark:!text-white !border !px-2 rounded-md !border-gray-700 dark:!border-gray-800 !shadow-none !drop-shadow-none dark:shadow-none dark:drop-shadow-sm tag-style py-0.5 text-sm font-semibold" data-tag="all">
    <span>Ã— </span><span id="tag-name"></span>
  </span>
</div>
  <div class="flex flex-row gap-2">
    <button
    class="tag-style rounded-md px-2 py-0.5 text-xs md:text-sm font-bold text-white bg-black outline outline-white outline-1 transition-all lowercase hover:brightness-125"
    data-tag="all"
  >
    x
  </button>
  {resolvedTags.map((tag) => (
    <button
      class="tag-style rounded-md !px-2 py-0.5 text-xs md:text-sm font-semibold text-white transition-all hover:brightness-125"
      data-tag={tag.id}
      style={`background-color: ${tag.data?.color || '#6B7280'}`}
    >
      {tag.id}
    </button>
  ))}
</div>
</div>
<script>
  function handleFilter() {
    const posts = document.querySelectorAll('[data-tags]');
    const tagButtons = document.querySelectorAll('.tag-style');
    const activeTagDisplay = document.getElementById('active-tag');
    const tagNameElement = document.getElementById('tag-name');

    function filterPosts(selectedTag: string) {
      if (selectedTag === 'all') {
        posts.forEach((post) => {
          (post as HTMLElement).style.opacity = '0';
          setTimeout(() => {
            post.classList.remove('hidden');
            (post as HTMLElement).style.opacity = '1';
          }, 300);
        });
        activeTagDisplay?.classList.add('hidden');
        return;
      }

      posts.forEach(post => {
        const tagsAttr = post.getAttribute('data-tags');
        const tags = tagsAttr ? tagsAttr.split(',') : [];
        
        (post as HTMLElement).style.opacity = '0';
        setTimeout(() => {
          if (tags.includes(selectedTag)) {
            post.classList.remove('hidden');
            (post as HTMLElement).style.opacity = '1';
          } else {
            post.classList.add('hidden');
          }
        }, 300);
      });

      const selectedTagData = document.querySelector(`[data-tag="${selectedTag}"]`);
      activeTagDisplay?.classList.remove('hidden');
      if (tagNameElement && selectedTagData) {
        tagNameElement.textContent = selectedTagData.textContent?.trim() || selectedTag;
      }
    }
    tagButtons.forEach(button => {
      button.addEventListener('click', () => {
        const selectedTag = button.getAttribute('data-tag') || 'all';
        tagButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        filterPosts(selectedTag);
      });
    });

    activeTagDisplay?.addEventListener('click', () => {
      const allButton = document.querySelector('[data-tag="all"]') as HTMLElement;
      if (allButton) {
        tagButtons.forEach(btn => btn.classList.remove('active'));
        allButton.classList.add('active');
        filterPosts('all');
      }
    });
  }

  document.addEventListener('astro:page-load', handleFilter);
  handleFilter();

</script>

<style>
  .tag-style.active {
    filter: brightness(125%);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }
</style> 