---
interface Props {
  dir: string;
  images: string[];
  alt?: string;
  aspectRatio?: "square" | "wide" | "custom";
  customRatio?: string;
  layout?: "single" | "double" | "triple";
  gap?: "none" | "small" | "medium" | "large" | "custom";
  customGap?: string;
  padding?: "none" | "small" | "medium" | "large" | "custom";
  customPadding?: string;
}

const { 
  dir,
  images,
  alt = "", 
  aspectRatio = "square",
  customRatio = "aspect-[2/1]",
  layout = "triple",
  gap = "medium",
  customGap = "gap-4",
  padding = "medium",
  customPadding = "p-4"
} = Astro.props;

// Determine grid layout class
const getGridClass = (layout: string) => {
  switch (layout) {
    case "single":
      return "grid-cols-1";
    case "double":
      return "grid-cols-1 md:grid-cols-2";
    case "triple":
      return "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3";
    default:
      return "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3";
  }
};

// Determine gap class
const getGapClass = (gapSize: string) => {
  switch (gapSize) {
    case "none":
      return "gap-0";
    case "small":
      return "gap-2";
    case "medium":
      return "gap-4";
    case "large":
      return "gap-6";
    case "custom":
      return customGap;
    default:
      return "gap-4";
  }
};

// Determine padding class
const getPaddingClass = (paddingSize: string) => {
  switch (paddingSize) {
    case "none":
      return "p-0";
    case "small":
      return "p-2";
    case "medium":
      return "p-4";
    case "large":
      return "p-6";
    case "custom":
      return customPadding;
    default:
      return "p-4";
  }
};

const gridClass = getGridClass(layout);
const gapClass = getGapClass(gap);
const paddingClass = getPaddingClass(padding);
---

<div class={`grid ${gridClass} ${gapClass}`}>
  {images.map((image, index) => (
    <div class={`group relative bg-gray-100 rounded-lg ${paddingClass}`}>
      <dialog
        id={`gallery-dialog-${dir}-${index}`}
        class="backdrop:bg-black/80 backdrop:backdrop-blur-sm p-4 max-w-[90vw] max-h-[90vh] rounded-lg"
        onclick="if (event.target === this) this.close()"
      >
        <div class="relative">
          <button
            onclick={`document.getElementById('gallery-dialog-${dir}-${index}').close()`}
            class="absolute -top-4 -right-4 bg-white hover:bg-gray-100 rounded-full p-2 transition-colors shadow-lg"
            aria-label="Close dialog"
          >
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              class="h-6 w-6 text-gray-800" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
              stroke-width="2"
            >
              <path 
                stroke-linecap="round" 
                stroke-linejoin="round" 
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
          <img
            src={`/images/${dir}/${image}`}
            alt={`${alt} ${index + 1}`}
            class="max-h-[80vh] w-auto object-contain rounded-lg"
            loading="lazy"
          />
        </div>
      </dialog>

      <button 
        onclick={`document.getElementById('gallery-dialog-${dir}-${index}').showModal()`}
        class="w-full h-full"
      >
        <div class="w-full h-full flex items-center justify-center">
          <img
            src={`/images/${dir}/${image}`}
            alt={`${alt} ${index + 1}`}
            class="max-w-full max-h-full object-contain"
            loading="lazy"
          />
        </div>
      </button>
    </div>
  ))}
</div>

<script>
  // Add keyboard event listener to close dialog with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      const openDialog = document.querySelector('dialog[open]') as HTMLDialogElement;
      if (openDialog) {
        openDialog.close();
      }
    }
  });
</script>