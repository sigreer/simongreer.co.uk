---
import { hashStringToColor } from '../utils/colorUtils';

export interface TagCloudProps {
  tagCounts?: Record<string, number>;
  tagsFor?: string;
  data?: any[];
  maxTags?: number;
}

const { tagCounts: propTagCounts, tagsFor, data, maxTags } = Astro.props as TagCloudProps;

let tagCounts: Record<string, number> = {};

if (propTagCounts) {
  tagCounts = propTagCounts;
} else if (data) {
  tagCounts = data.reduce((acc, item) => {
    const tags = item.data?.tags || [];
    
    if (Array.isArray(tags)) {
      tags.forEach((tag: string) => {
        acc[tag] = (acc[tag] || 0) + 1;
      });
    }
    return acc;
  }, {} as Record<string, number>);
}

// Sort tags by count in descending order
const sortedTags = Object.entries(tagCounts)
  .sort((a, b) => b[1] - a[1])
  .slice(0, maxTags);

const maxCount = Math.max(...Object.values(tagCounts));
---

<div class="flex flex-wrap gap-2 tag-block">
  {sortedTags.map(([tag, count]) => (
    <a
      href={`/${tagsFor}?tag=${encodeURIComponent(tag)}`}
      class="inline-block rounded-md px-2 py-1 text-xs md:text-base lg:text-lg font-semibold text-white tag-style transition-all hover:scale-110 relative"
      data-tag={tag}
    >
      {tag}
      <span class="ml-1 px-1 rounded bg-black bg-opacity-20">
        {count}
      </span>
    </a>
  ))}
</div>

<script>
  // Ensure tag colors are applied after component loads
  document.addEventListener('astro:page-load', () => {
    if (typeof window.applyTagColorsToNewElements === 'function') {
      window.applyTagColorsToNewElements();
    }
  });
</script>